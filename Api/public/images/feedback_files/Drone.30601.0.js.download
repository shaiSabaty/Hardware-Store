/*** Drone* Front-End user action collect library*/NEG.Module("NEG.Widget.Drone", function (require) {var EVENT_MAP = {},FREE_MAP = {},listeners = new Map(),Event_Config = require("NEG.Widget.Drone.DroneConfig"),defaultOptions = {trackingPrefix: 't',keyParamName: 'events'},merge = NEG.merge;/*** constructor* @param {object} options*/var Drone = function (options) {this.base = {};this.options = merge(defaultOptions, options);};/**** @param {string} urlAlias* @param {config}*/Drone.prototype.initalize = function (params) {if (!params.urlAlias) {throw "urlAlias must not be empty";}if (!!params.base) {this.base = deepClone(params.base);}if (!!params.brief) {this.brief = params.brief;}if (!!params.trackingPrefix) {this.options.trackingPrefix = params.trackingPrefix;}this.rTrackingParam = new RegExp("^" + this.options.trackingPrefix + "-(.*)", 'i');this.keyAttribute = this.options.trackingPrefix + '-' + this.options.keyParamName;this.keyParam = kebab2Camel(this.keyAttribute);this.moduleNameParam = 'tracking-module';this.urlAlias = params.urlAlias;this.getTrackingParams = this.getTrackingParams.bind(this);this.loadingEventCfg(this.urlAlias);this.adobeClick(this.urlAlias);};/*** load event map to Drone through pageUrlAlias* @param {string} urlAlias pageUrlAlias*/Drone.prototype.loadingEventCfg = function (urlAlias) {var commonCfg = Event_Config.common,currentCfg = Event_Config.pages[urlAlias];if (!!commonCfg) {this.base = merge({}, this.base, commonCfg.default);EVENT_MAP = merge({}, commonCfg.events);FREE_MAP = merge({}, FREE_MAP, commonCfg.freestyle);}if (!!currentCfg) {this.base = merge({}, this.base, currentCfg.default);EVENT_MAP = merge({}, EVENT_MAP, currentCfg.events);FREE_MAP = merge({}, FREE_MAP, currentCfg.freestyle);}};/*** whether an dom element is need to be tracked* @param {HTMLElement} element* @returns {boolean}*/Drone.prototype.isNeedTracked = function (element, zIndex) {var cfgMapKey;if (element instanceof HTMLSelectElement && zIndex < 3) {this.handleSelectOnchange(element);}else if (element instanceof HTMLElement && zIndex < 3) {cfgMapKey = element.getAttribute(this.keyAttribute);if (!EVENT_MAP[cfgMapKey] && !!element.parentElement) {return this.isNeedTracked(element.parentElement, zIndex + 1);}return !!EVENT_MAP[cfgMapKey] && element;}return false;};/*** get tracking module name* @param {HTMLElement} element* @returns {string}*/Drone.prototype.getModuleName = function (element) {if (!!element) {return element.getAttribute(this.moduleNameParam) || this.getModuleName(element.parentElement);}return '';};/*** get tracking Params from DOMNode* @param {HTMLElement} element* @returns {object}*/Drone.prototype.getTrackingParams = function (element) {var self = this, params = {}, key, moduleName;if (element instanceof HTMLElement) {Object.keys(self.base || {}).forEach((function (key) {params[key] = self.base[key];}));Array.prototype.forEach.call(element.attributes, function (attr) {attr.name.replace(self.rTrackingParam, function (source, m1) {var paramKey = kebab2Camel(m1),eventId;if (paramKey === self.options.keyParamName) {eventId = getEvent(attr.value);if (eventId) {params[paramKey] = eventId;}} else if (FREE_MAP[paramKey]) {params[FREE_MAP[paramKey]] = attr.value;}else {params[paramKey] = attr.value;if (self.brief) {params[paramKey] = String.prototype.split.call(params[paramKey] || '', ':')[0];}}});});}return Object.keys(params).reduce(function (ret, key) {ret[key] = params[key].replace('$', function (match) {if (!!moduleName) {return moduleName;}return self.getModuleName(element);});return ret;}, {});};/*** start adobe tracking* @param {string} urlAlias*/Drone.prototype.adobeClick = function (urlAlias) {this.globalClickEvent(generateAdobeTracking(urlAlias + ' click'));};/*** deal global click event to an traced object and sent it* @param {Function} send handle target to Service*/Drone.prototype.globalClickEvent = function (send) {var self = this;document.addEventListener('click', function (event) {var element = self.isNeedTracked(event.target, 0);if (!!element) {var tracking = compose(send, self.getTrackingParams);tracking.call(self, element);}});};Drone.prototype.handleSelectOnchange = function (element) {var self = this;if (!!listeners.get(element)) return;listeners.set(element, (function (el) {if (el instanceof HTMLSelectElement) {el.addEventListener('change', function (value, b, c) {var target = event.target,element = self.isNeedTracked(target.options[target.selectedIndex], 2),send = generateAdobeTracking(self.urlAlias + '  click');if (!!element) {var tracking = compose(send, self.getTrackingParams);tracking.call(self, element);}});}return true;})(element));};/*** <FP> compose* @param {Function} f* @param {Function} g*/function compose(f, g) {return function (x) {f(g(x));}}/*** transform kebab to camel case* eg. some-sample => someSample* @param {string} s source string*/function kebab2Camel(s) {return s.replace(/-[a-zA-Z]/ig, function (m, a, c) {return m.slice(1).toUpperCase();});}/*** currying function in back-order* @param {Function} fn*/function reverseCurrying(fn) {var arity = fn.length;return (function resolver() {var memory = Array.prototype.slice.call(arguments);return function () {var local = memory.slice(), next;Array.prototype.push.apply(local, arguments);next = local.length >= arity ? fn : resolver;return next.apply(null, local.reverse());}})()}/*** get event value from EVENT_MAP* eg: A => event67* @param {string} key event key*/function getEvent(key) {return EVENT_MAP[key];}/*** create adobe Function* @param {string} action s.tl(this,'o',linkName) refer to Adobe Api* @returns {Function}*/function generateAdobeTracking(linkName) {var adobeTracking = reverseCurrying(Biz.Common.SiteCatalyst.sendForOnClick);return adobeTracking(linkName);}/*** deepClone an Object* @param {object} source* @param {*} target*/function deepClone(target) {var ret;switch (typeof target) {case 'object':if (target instanceof Array) {return Array.prototype.concat.apply([], target);} else {ret = {};Object.keys(target).forEach(function (key) {var value = target[key];ret[key] = deepClone(value);});return ret;}break;default:return target;}}return new Drone();});